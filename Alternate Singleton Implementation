var flowControl = { None : 0, Low : 1, Medium : 2, High : 4 };
var faucetWaterTemperature = { Notset : 0, Cold : 1, Warm : 2 };

//Objects declared as functions
function Water(){

	//private instances
	var waterTemperature = faucetWaterTemperature.NotSet;
	var quantity;
	//public instances
	Water.WaterTemperature = waterTemperature;
	Water.Quantity = quantity;

	//equivalent to get and set method sin C#
	Water.setQuantity = function(newValue){
		this.quantity = newValue;
	}

	Water.getQuantity = function(){
		return this.quantity;
	}

	Water.add = function(quantity){
		this.quantity += quantity;
	}
}


//Unsure how to make abstract
function Faucet(){
	var flow = flowControl.None;
	Faucet.Flow = flow;
	Faucet.open = function(flow){
		this.flow = flow;
	}

	Faucet.close = function(){
		this.flow = flowControl.None;
	}

	Faucet.getWater = function(quantity){
		var water = new Water();
		this.open(flowControl.Low);
		while(water.Quantity < quantity){
			water.add(this.Flow);
		}
		this.close();
		return water;
	}
}


function ColdWaterFaucet(){
	//Trying to inherit Faucet object
	ColdWaterFaucet.prototype = new Faucet();
	ColdWaterFaucet.instance = null;
	//Attempt at singleton implementation in redefined constructor
	function ColdWaterFaucet(){
		getInstance();
		return instance;
	}

	//Ensures that only one instance exists
	function getInstance(){
		if(instance ==  null){
			instance = new ColdWaterFaucet()
		}
	}

	ColdWaterFaucet.getWater = function(quantity){
		//Try to replicate super.getWater(quantity)
		var water = ColdWaterFaucet.prototype.getWater(quantity);
		water.WaterTemperature = faucetWaterTemperature.Cold;
		return water;
	}
}

function WarmWaterFaucet(){
	WarmWaterFaucet.prototype = new Faucet();
	WarmWaterFaucet.instance = null;
	function WarmWaterFaucet(){
		getInstance();
		return instance;
	}

	function getInstance(){
		if(instance ==  null){
			instance = new WarmWaterFaucet()
		}
	}

	WarmWaterFaucet.open = Faucet.open;
	WarmWaterFaucet.close = Faucet.close;

	WarmWaterFaucet.getWater = function(quantity){
		var water = WarmWaterFaucet.prototype.getWater(quantity);
		water.WaterTemperature = faucetWaterTemperature.Warm;
		return water;
	}
}	
